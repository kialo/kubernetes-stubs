from typing import Any, Optional

from kubernetes.client.api_client import ApiClient as ApiClient
from kubernetes.client.models import (
    V1Eviction,
    V1NamespaceList,
    V1Node,
    V1NodeList,
    V1PersistentVolumeClaimList,
    V1PersistentVolumeList,
    V1PodList,
    V1Secret,
    V1SecretList,
    V1Status,
)

class CoreV1Api:
    api_client: ApiClient = ...
    def __init__(self, api_client: Optional[ApiClient] = ...) -> None: ...
    def replace_namespaced_secret(self, name: str, namespace: str, body: Any, **kwargs: Any) -> V1Secret: ...
    def read_namespaced_secret(self, name: str, namespace: str, **kwargs: Any) -> V1Secret: ...
    def create_namespaced_secret(self, namespace: str, body: Any, **kwargs: Any) -> V1Secret: ...
    def create_namespaced_pod_eviction(self, name: str, namespace: str, body: Any, **kwargs: Any) -> V1Eviction: ...
    def list_pod_for_all_namespaces(self, **kwargs: Any) -> V1PodList: ...
    def read_namespaced_pod_log(self, name: str, namespace: str, **kwargs: Any) -> str: ...
    def list_namespaced_persistent_volume_claim(self, namespace: str, **kwargs: Any) -> V1PersistentVolumeClaimList: ...
    def patch_node(self, name: str, body: Any, **kwargs: Any) -> V1Node: ...
    def list_node(self, **kwargs: Any) -> V1NodeList: ...
    def read_node(self, name: str, **kwargs: Any) -> V1Node: ...
    def list_namespaced_pod(self, namespace: str, **kwargs: Any) -> V1PodList: ...
    def list_namespace(self, **kwargs: Any) -> V1NamespaceList: ...
    def list_namespaced_secret(self, namespace: str, **kwargs: Any) -> V1SecretList: ...
    def delete_namespaced_secret(self, name: str, namespace: str, **kwargs: Any) -> V1Status: ...
    def connect_get_namespaced_pod_portforward(self, name: str, namespace: str, **kwargs: Any) -> str: ...
    def list_persistent_volume(self, **kwargs: Any) -> V1PersistentVolumeList: ...
    def delete_persistent_volume(self, name: str, **kwargs: Any) -> Any: ...
